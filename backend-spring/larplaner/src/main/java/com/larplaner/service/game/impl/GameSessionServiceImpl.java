package com.larplaner.service.game.impl;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;

import com.larplaner.dto.game.GameSessionRequestDTO;
import com.larplaner.dto.game.GameSessionResponseDTO;
import com.larplaner.dto.game.UpdateGameSessionRequestDTO;
import com.larplaner.dto.game.actionLog.GameActionLogResponseDTO;
import com.larplaner.dto.game.roleState.GameRoleStateResponseDTO;
import com.larplaner.mapper.game.GameSessionMapper;
import com.larplaner.mapper.game.action.GameActionLogMapper;
import com.larplaner.model.event.Event;
import com.larplaner.model.game.GameActionLog;
import com.larplaner.model.game.GameSession;
import com.larplaner.repository.event.EventRepository;
import com.larplaner.repository.game.GameActionLogRepository;
import com.larplaner.repository.game.GameItemStateRepository;
import com.larplaner.repository.game.GameRoleStateRepository;
import com.larplaner.repository.game.GameSessionRepository;
import com.larplaner.repository.tag.TagRepository;
import com.larplaner.service.game.GameSessionService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class GameSessionServiceImpl implements GameSessionService {

  private final GameSessionRepository gameSessionRepository;
  private final EventRepository eventRepository;
  private final GameActionLogRepository gameActionLogRepository;
  private final GameRoleStateRepository gameRoleStateRepository;
  private final GameItemStateRepository gameItemStateRepository;
  private final TagRepository tagRepository;
  private final GameSessionMapper gameSessionMapper;
  private final GameActionLogMapper gameActionLogMapper;

  @Override
  public List<GameSessionResponseDTO> getAllGameSessions() {
    return gameSessionRepository.findAll().stream()
        .map(gameSessionMapper::toDTO)
        .collect(Collectors.toList());
  }

  @Override
  public GameSessionResponseDTO getGameSessionById(UUID id) {
    return gameSessionRepository.findById(id)
        .map(gameSessionMapper::toDTO)
        .orElse(null);
  }

  @Override
  public GameSessionResponseDTO createGameSession(GameSessionRequestDTO gameSessionDTO) {
    Event event = eventRepository.findById(UUID.fromString(gameSessionDTO.getEventId())).orElseThrow(
        () -> new RuntimeException("Event not found"));

    // TODO: id should be generated by the database
    GameSession gameSession = GameSession.builder()
        .event(event)
        .build();
    return gameSessionMapper.toDTO(gameSessionRepository.save(gameSession));
  }

  @Override
  public GameSessionResponseDTO updateGameSession(UUID id,
      UpdateGameSessionRequestDTO updateGameSessionRequestDTO) {
    GameSession gameSession = gameSessionRepository.findById(id).orElseThrow(
        () -> new RuntimeException("Game session not found"));
    gameSessionMapper.updateEntityFromDTO(updateGameSessionRequestDTO, gameSession);
    return gameSessionMapper.toDTO(gameSessionRepository.save(gameSession));
  }

  @Override
  public void deleteGameSession(UUID id) {
    gameSessionRepository.deleteById(id);
  }

  @Override
  public List<GameActionLogResponseDTO> getAllGameHistory() {
    return gameActionLogRepository.findAll().stream()
        .map(gameActionLogMapper::toDTO)
        .collect(Collectors.toList());
  }

  @Override
  public GameActionLogResponseDTO getGameHistoryById(UUID id) {
    return gameActionLogRepository.findById(id)
        .map(gameActionLogMapper::toDTO)
        .orElse(null);
  }

  @Override
  public List<GameActionLogResponseDTO> getGameHistoryByGameId(UUID gameId) {
    return gameActionLogRepository.findByGameSession_Id(gameId).stream()
        .map(gameActionLogMapper::toDTO)
        .collect(Collectors.toList());
  }

  @Override
  public List<GameActionLogResponseDTO> getGameHistoryByUserIdAndGameId(String userId,
      UUID gameId) {
    GameSessionResponseDTO gameSession = getGameSessionById(gameId);
    if (gameSession == null) {
      return new ArrayList<>();
    }

    UUID userRoleId = gameSession.getAssignedRoles().stream()
        .filter(role -> role.getAssignedUserID().equals(userId))
        .map(GameRoleStateResponseDTO::getScenarioRoleId)
        .findFirst()
        .orElse(null);

    if (userRoleId == null) {
      return new ArrayList<>();
    }

    return gameActionLogRepository.findByGameSession_IdAndPerformerRole_Id(gameId, userRoleId)
        .stream()
        .map(gameActionLogMapper::toDTO)
        .collect(Collectors.toList());
  }

  @Override
  public GameActionLogResponseDTO createGameHistory(GameActionLogResponseDTO gameActionLogDTO) {
    GameActionLog gameActionLog = gameActionLogMapper.toEntity(gameActionLogDTO);
    gameActionLog.setId(UUID.randomUUID());
    return gameActionLogMapper.toDTO(gameActionLogRepository.save(gameActionLog));
  }

}